#pragma once
/************************************************************************************************/
/*** Topic: Dynamic Runge-Kutta 4th Order Method application								  ***/
/***        solved numerically using RungeKutta 4th order method with adaptive time step size ***/
/***           Explosive synchronization in interlayer phase-shifted Kuramoto oscillators on  ***/
/***             multiplex networks     --Sarika Jalan--                                      ***/
/*** Version Release 17.12 rev 11256                                                Ali-Seif  ***/
/*** Date: 8/19/2022                                                                          ***/
/*** Code implemented in Microsoft Visual Studio Enterprise 2019 C++ compiler                 ***/
/*** MSI: PX60 6QD/ DDR4                                                                      ***/
/*** Run under a Intel® Core™ i7-6700HQ CPU @ 2.60GHz × 64 based processor with 16 GB RAM     ***/
/*** in the computational server manual parallel                                              ***/
/************************************************************************************************/
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//$$$$$                                                                                                                  $$$$$
//$$$$$                                                  Source.cpp                                                      $$$$$
//$$$$$                                                                                                                  $$$$$
/*#include"RK4.h"                                                            //import library Kuramoto                  //$$$$
int main() {                                                                    //Beginning main                        //$$$$
DRK4(0.0, 4.0, 0.01, 0.001, 0.0, 0.001, 0.008, 0.01);//double (t_first,t_last,dt,dt_min, y,y_tol);                      //$$$$
CRK4(0.0, 4.0, 0.01, 0.001, 0.0, 0.001, 0.008, 0.01);//double (t_first,t_last,dt,dt_min, y,y_tol);                      //$$$$
return 0;                                                                   //run program was correct                   //$$$$
}*/                                                                                                                     //$$$$
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#include<iostream>                                                              //for cout                              //$$$$
#include<fstream>                                                               //infile /ofstream                      //$$$$
using namespace std;                                                                                                    //$$$$
double mfun(double t, double y)                                                                                         //$$$$
{                                                                                                                       //$$$$
    //double mf =y-y+5; //for this example t_last=40                                                                    //$$$$
    double mf = exp(y) - y * exp(t); //for this example t_last=4                                                        //$$$$
    return mf;                                                                                                          //$$$$
}                                                                                                                       //$$$$
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//$$$$$                                                                                                                  $$$$$
//$$$$$                                                    DRK4                                                          $$$$$
//$$$$$                                                                                                                  $$$$$
void  DRK4(double t, double t_last, double dt, double dt_min, double y, double y_tol, double dy_min, double dy_max) {   //$$$$
    ofstream Print_DRK4("DRK4.txt");                                                                               //$$$$
    while (t < t_last) {                                                                                                //$$$$
        double k1, k2, k3, k4, sy, hsy, dsy, ny;                                                                        //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@                                    Nurmal step                                 @@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        k1 = mfun(t, y);                                                                                                //$$$$
        k2 = mfun(t + dt / 2, y + dt * k1 / 2);                                                                         //$$$$
        k3 = mfun(t + dt / 2, y + dt * k2 / 2);                                                                         //$$$$
        k4 = mfun(t + dt, y + dt * k3);                                                                                 //$$$$
        sy = y + dt / 6 * (k1 + 2 * k2 + 2 * k3 + k4);                                                                  //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@                                    Half step                                   @@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        k2 = mfun(t + dt / 4, y + dt * k1 / 4);                                                                         //$$$$
        k3 = mfun(t + dt / 4, y + dt * k2 / 4);                                                                         //$$$$
        k4 = mfun(t + dt / 2, y + dt * k3 / 2);                                                                         //$$$$
        hsy = y + dt / 12 * (k1 + 2 * k2 + 2 * k3 + k4);                                                                //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@                                   Double step                                  @@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        k2 = mfun(t + dt, y + dt * k1);                                                                                 //$$$$
        k3 = mfun(t + dt, y + dt * k2);                                                                                 //$$$$
        k4 = mfun(t + dt * 2, y + dt * k3 * 2);                                                                         //$$$$
        dsy = y + dt / 3 * (k1 + 2 * k2 + 2 * k3 + k4);                                                                 //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@                                  compareand use                                @@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        if (abs(sy) < y_tol) {                                                              //@@@                       //$$$$
            if (dt = !dt_min) {                                                             //@@@                       //$$$$
                cout << "New step size=\t" << dt_min<<endl;                                 //@@@                       //$$$$
                dt = dt_min;                                                                //@@@                       //$$$$
            }                                                                               //@@@                       //$$$$
            ny = sy;                                                                        //@@@                       //$$$$
        }else {                                                                             //@@@                       //$$$$
            if (abs(sy) > y_tol && (abs(sy - hsy) / abs(sy)) > dy_max) {                    //@@@                       //$$$$
                dt = dt / 2;                                                                //@@@                       //$$$$
                cout << "New step size=\t" << dt << endl;                                   //@@@                       //$$$$
                ny = hsy;                                                                   //@@@                       //$$$$
            }                                                                               //@@@                       //$$$$
            else if (abs(sy) > y_tol && (abs(sy - dsy) / abs(sy)) < dy_min) {               //@@@                       //$$$$
                dt = dt * 2;                                                                //@@@                       //$$$$
                cout << "New step size=\t" << dt << endl;                                   //@@@                       //$$$$
                ny = dsy;                                                                   //@@@                       //$$$$
            }else {                                                                         //@@@                       //$$$$
                ny = sy;                                                                    //@@@                       //$$$$
            }                                                                               //@@@                       //$$$$
        }                                                                                   //@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        y = ny;                                                                                                         //$$$$
        t = t + dt;                                                                                                     //$$$$
        Print_DRK4 << t << '\t' << y << endl;                                                                           //$$$$
    }                                                                                                                   //$$$$
}                                                                                                                       //$$$$
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//$$$$$                                                                                                                  $$$$$
//$$$$$                                                    CRK4                                                          $$$$$
//$$$$$                                                                                                                  $$$$$
void  CRK4(double t, double t_last, double dt, double dt_min, double y, double y_tol, double dy_min, double dy_max) {   //$$$$
    ofstream Print_CRK4("CRK4.txt");                                                                               //$$$$
    while (t < t_last) {                                                                                                //$$$$
        double k1, k2, k3, k4, sy;                                                                                      //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@                                    Nurmal step                                 @@@@                       //$$$$
        //@@@                                                                                @@@@                       //$$$$
        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                       //$$$$
        k1 = mfun(t, y);                                                                                                //$$$$
        k2 = mfun(t + dt / 2, y + dt * k1 / 2);                                                                         //$$$$
        k3 = mfun(t + dt / 2, y + dt * k2 / 2);                                                                         //$$$$
        k4 = mfun(t + dt, y + dt * k3);                                                                                 //$$$$
        sy = y + dt / 6 * (k1 + 2 * k2 + 2 * k3 + k4);                                                                  //$$$$
        y = sy;                                                                                                         //$$$$
        t = t + dt;                                                                                                     //$$$$
        Print_CRK4 << t << '\t' << y << endl;                                                                           //$$$$
    }                                                                                                                   //$$$$
}                                                                                                                       //$$$$
//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$